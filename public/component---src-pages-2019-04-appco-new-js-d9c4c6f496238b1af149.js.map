{"version":3,"sources":["webpack:///./src/pages/2019-04/appco-new.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./src/components/app.js"],"names":["query","AppCo","_ref","data","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_3__","thismonth","totalCount","edges","map","d","idx","appcodata","allApps","filter","e","node","appcoid","console","log","app","Object","assign","lifetimeEarnings","website","length","key","_components_app__WEBPACK_IMPORTED_MODULE_2__","hideRewards","__webpack_require__","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","props","Consumer","staticQueryData","render","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","json","shape","Header","siteTitle","react_default","style","background","marginBottom","margin","maxWidth","padding","gatsby_browser_entry","to","color","textDecoration","defaultProps","Layout","Fragment","header","site","siteMetadata","title","paddingTop","Date","getFullYear","href","_755544856","dP","f","FProto","Function","prototype","nameRE","configurable","get","this","match","numberFormat","Intl","NumberFormat","currency","commitFormat","DateTimeFormat","year","month","App","hideDetailsLink","earnings","format","lastUpdate","openSourceUrl","lastCommitDate","parse","fields","lastCommit","isNaN","name"],"mappings":"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","file":"component---src-pages-2019-04-appco-new-js-d9c4c6f496238b1af149.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport App from '../../components/app'\nimport Layout from '../../components/layout'\n\nconst AppCo = ({ data }) => {\n  return (\n    <Layout>\n      <h1>New Blockstack Apps (April 2019)</h1>\n      <ul>\n        <li>Total number: {data.thismonth.totalCount}</li>\n      </ul>\n      <ul>\n        {data.thismonth.edges.map(function(d, idx) {\n          const appcodata = data.allApps.edges.filter(\n            e => e.node.appcoid === d.node.appcoid\n          )\n          console.log(appcodata)\n          const app = {\n            lifetimeEarnings: 0,\n            website: appcodata.length > 0 ? appcodata[0].node.website : null,\n            ...d.node,\n          }\n          console.log(app.website)\n          return (\n            <li key={idx}>\n              <App data={app} hideRewards />\n            </li>\n          )\n        })}\n      </ul>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query new201904 {\n    thismonth:allAppminingresultsXlsxApril2019(\n      filter: { Score_Last_Round: { eq: null }, Average_Score: {ne: null} }\n    ) {\n      totalCount\n      edges {\n        node {\n          appcoid: App_ID\n          name: App_name\n          Final_Score\n        }\n      }\n    }\n    allApps {\n      edges {\n        node {\n          ...AppInformation\n        }\n      }\n    }\n  }\n`\n\nexport default AppCo\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst Header = ({ siteTitle }) => (\n  <div\n    style={{\n      background: `#5DBCD2`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </div>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport './layout.css'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            margin: `0 auto`,\n            maxWidth: 960,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n          }}\n        >\n          {children}\n          <footer>\n            © {new Date().getFullYear()}, Built with\n            {` `}\n            <a href=\"https://www.gatsbyjs.org\">Gatsby</a> and{' '}\n            <a href=\"https://blockstack.org\">Blockstack</a>.\n              {' '}You can{' '}\n              <a href=\"https://gitlab.com/friedger/app-center\">\n                view the source here\n              </a>\n          </footer>\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nexport const numberFormat = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n})\nexport const commitFormat = new Intl.DateTimeFormat('en-US', {\n  year: 'numeric',\n  month: 'long',\n})\nconst App = ({ data, hideRewards, hideDetailsLink }) => {\n  const earnings = numberFormat.format(data.lifetimeEarnings)\n  var lastUpdate = ''\n  if (data.openSourceUrl) {\n    const lastCommitDate = Date.parse(data.fields.lastCommit)\n    if (isNaN(lastCommitDate)) {\n      lastUpdate = data.fields.lastCommit\n    } else {\n      lastUpdate = commitFormat.format(lastCommitDate)\n    }\n  }\n\n  return (\n    <>\n      {!hideDetailsLink && <a href={`/appco/${data.appcoid}`}>{data.name}</a>}\n      {hideDetailsLink && <>{data.name}</>}\n      {data.openSourceUrl && (\n        <>\n          {' '}\n          (<a href={data.openSourceUrl}>{data.openSourceUrl}</a>)\n        </>\n      )}\n      {!hideRewards && (\n        <>\n          <br />\n          rewards: {earnings}{' '}\n        </>\n      )}\n      {data.openSourceUrl && (\n        <>\n          <br />\n          last update: {lastUpdate}\n        </>\n      )}\n      <br />\n      {data.website && data.website.length > 0 && (\n        <a href={data.website}>Launch app</a>\n      )}\n    </>\n  )\n}\n\nexport const query = graphql`\n  fragment AppInformation on apps {\n    appcoid: id__normalized\n    name\n    website\n    lifetimeEarnings\n    openSourceUrl\n    fields {\n      lastCommit\n    }\n  }\n`\n\nexport default App\n"],"sourceRoot":""}