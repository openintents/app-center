{"version":3,"sources":["webpack:///./src/pages/2019-03/appco-new.js","webpack:///./src/components/app.js"],"names":["query","AppCo","_ref","data","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_3__","thismonth","totalCount","edges","map","d","idx","appcodata","allApps","filter","e","node","appcoid","console","log","app","Object","assign","lifetimeEarnings","website","length","key","_components_app__WEBPACK_IMPORTED_MODULE_2__","hideRewards","numberFormat","Intl","NumberFormat","style","currency","commitFormat","DateTimeFormat","year","month","App","hideDetailsLink","earnings","format","lastUpdate","openSourceUrl","lastCommitDate","Date","parse","fields","lastCommit","isNaN","Fragment","href","name"],"mappings":"kLAmCaA,EAAK,aAwBHC,UAtDD,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACf,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,8CACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,2BAAmBH,EAAKK,UAAUC,aAEpCL,EAAAC,EAAAC,cAAA,UACGH,EAAKK,UAAUE,MAAMC,IAAI,SAASC,EAAGC,GACpC,IAAMC,EAAYX,EAAKY,QAAQL,MAAMM,OACnC,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,UAAYP,EAAEM,KAAKC,UAEjCC,QAAQC,IAAIP,GACZ,IAAMQ,EAAGC,OAAAC,OAAA,CACPC,iBAAkB,EAClBC,QAASZ,EAAUa,OAAS,EAAIb,EAAU,GAAGI,KAAKQ,QAAU,MACzDd,EAAEM,MAGP,OADAE,QAAQC,IAAIC,EAAII,SAEdtB,EAAAC,EAAAC,cAAA,MAAIsB,IAAKf,GACPT,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAK1B,KAAMmB,EAAKQ,aAAW,sGCvB5BC,EAAe,IAAIC,KAAKC,aAAa,QAAS,CACzDC,MAAO,WACPC,SAAU,QAECC,EAAe,IAAIJ,KAAKK,eAAe,QAAS,CAC3DC,KAAM,UACNC,MAAO,SAyDMC,IAvDH,SAAAtC,GAA4C,IAAzCC,EAAyCD,EAAzCC,KAAM2B,EAAmC5B,EAAnC4B,YAAaW,EAAsBvC,EAAtBuC,gBAC1BC,EAAWX,EAAaY,OAAOxC,EAAKsB,kBACtCmB,EAAa,GACjB,GAAIzC,EAAK0C,cAAe,CACtB,IAAMC,EAAiBC,KAAKC,MAAM7C,EAAK8C,OAAOC,YAE5CN,EADEO,MAAML,GACK3C,EAAK8C,OAAOC,WAEZd,EAAaO,OAAOG,GAIrC,OACE1C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+C,SAAA,MACIX,GAAmBrC,EAAAC,EAAAC,cAAA,KAAG+C,KAAI,UAAYlD,EAAKgB,SAAYhB,EAAKmD,MAC7Db,GAAmBrC,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+C,SAAA,KAAGjD,EAAKmD,MAC3BnD,EAAK0C,eACJzC,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+C,SAAA,KACG,IADH,IAEGhD,EAAAC,EAAAC,cAAA,KAAG+C,KAAMlD,EAAK0C,eAAgB1C,EAAK0C,eAFtC,MAKAf,GACA1B,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+C,SAAA,KACEhD,EAAAC,EAAAC,cAAA,WADF,YAEYoC,EAAU,KAGvBvC,EAAK0C,eACJzC,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+C,SAAA,KACEhD,EAAAC,EAAAC,cAAA,WADF,gBAEgBsC,GAGlBxC,EAAAC,EAAAC,cAAA,WACCH,EAAKuB,SAAWvB,EAAKuB,QAAQC,OAAS,GACrCvB,EAAAC,EAAAC,cAAA,KAAG+C,KAAMlD,EAAKuB,SAAd","file":"component---src-pages-2019-03-appco-new-js-f68cc8cef8223cb4f446.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport App from '../../components/app'\nimport Layout from '../../components/layout'\n\nconst AppCo = ({ data }) => {\n  return (\n    <Layout>\n      <h1>New Blockstack Apps (March 2019)</h1>\n      <ul>\n        <li>Total number: {data.thismonth.totalCount}</li>\n      </ul>\n      <ul>\n        {data.thismonth.edges.map(function(d, idx) {\n          const appcodata = data.allApps.edges.filter(\n            e => e.node.appcoid === d.node.appcoid\n          )\n          console.log(appcodata)\n          const app = {\n            lifetimeEarnings: 0,\n            website: appcodata.length > 0 ? appcodata[0].node.website : null,\n            ...d.node,\n          }\n          console.log(app.website)\n          return (\n            <li key={idx}>\n              <App data={app} hideRewards />\n            </li>\n          )\n        })}\n      </ul>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query new201903 {\n    thismonth:allAppminingresultsXlsxMarch2019(\n      filter: { Score_Last_Round: { eq: null }, Average_Score: {ne: null} }\n    ) {\n      totalCount\n      edges {\n        node {\n          appcoid: App_ID\n          name: App_Name\n          Final_Score\n        }\n      }\n    }\n    allApps {\n      edges {\n        node {\n          ...AppInformation\n        }\n      }\n    }\n  }\n`\n\nexport default AppCo\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nexport const numberFormat = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n})\nexport const commitFormat = new Intl.DateTimeFormat('en-US', {\n  year: 'numeric',\n  month: 'long',\n})\nconst App = ({ data, hideRewards, hideDetailsLink }) => {\n  const earnings = numberFormat.format(data.lifetimeEarnings)\n  var lastUpdate = ''\n  if (data.openSourceUrl) {\n    const lastCommitDate = Date.parse(data.fields.lastCommit)\n    if (isNaN(lastCommitDate)) {\n      lastUpdate = data.fields.lastCommit\n    } else {\n      lastUpdate = commitFormat.format(lastCommitDate)\n    }\n  }\n\n  return (\n    <>\n      {!hideDetailsLink && <a href={`/appco/${data.appcoid}`}>{data.name}</a>}\n      {hideDetailsLink && <>{data.name}</>}\n      {data.openSourceUrl && (\n        <>\n          {' '}\n          (<a href={data.openSourceUrl}>{data.openSourceUrl}</a>)\n        </>\n      )}\n      {!hideRewards && (\n        <>\n          <br />\n          rewards: {earnings}{' '}\n        </>\n      )}\n      {data.openSourceUrl && (\n        <>\n          <br />\n          last update: {lastUpdate}\n        </>\n      )}\n      <br />\n      {data.website && data.website.length > 0 && (\n        <a href={data.website}>Launch app</a>\n      )}\n    </>\n  )\n}\n\nexport const query = graphql`\n  fragment AppInformation on apps {\n    appcoid: id__normalized\n    name\n    website\n    lifetimeEarnings\n    openSourceUrl\n    fields {\n      lastCommit\n    }\n  }\n`\n\nexport default App\n"],"sourceRoot":""}