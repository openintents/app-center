{"version":3,"sources":["webpack:///./src/pages/2019-06/appco-out.js","webpack:///./src/components/app.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_app__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","AppCo","_ref","data","retiredApps","lastmonth","edges","filter","thismonth","e","node","appcoid","length","map","idx","a","createElement","key","hideRewards","hideDetailsLink","numberFormat","Intl","NumberFormat","style","currency","commitFormat","DateTimeFormat","year","month","App","earnings","format","lifetimeEarnings","lastUpdate","openSourceUrl","lastCommitDate","Date","parse","fields","lastCommit","isNaN","react__WEBPACK_IMPORTED_MODULE_1___default","Fragment","href","name","website"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KAgCaI,EAAK,aA0BHM,UArDD,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACTC,EAAcD,EAAKE,UAAUC,MAChCC,OAAO,SAASb,GAIf,OAA4B,IAHVS,EAAKK,UAAUF,MAAMC,OACrC,SAAAE,GAAC,OAAIA,EAAEC,KAAKC,UAAYjB,EAAEgB,KAAKC,UAEhBC,SAElBC,IAAI,SAACnB,EAAGoB,GACP,OACEjB,EAAAkB,EAAAC,cAAA,MAAIC,IAAKH,GACPjB,EAAAkB,EAAAC,cAACjB,EAAA,EAAD,CAAKI,KAAMT,EAAEgB,KAAMQ,aAAW,EAACC,iBAAe,OAKtD,OACEtB,EAAAkB,EAAAC,cAAChB,EAAA,EAAD,KACEH,EAAAkB,EAAAC,cAAA,iDACAnB,EAAAkB,EAAAC,cAAA,UACEnB,EAAAkB,EAAAC,cAAA,2BAAmBZ,EAAYQ,SAEjCf,EAAAkB,EAAAC,cAAA,UAAKZ,iGCxBEgB,EAAe,IAAIC,KAAKC,aAAa,QAAS,CACzDC,MAAO,WACPC,SAAU,QAECC,EAAe,IAAIJ,KAAKK,eAAe,QAAS,CAC3DC,KAAM,UACNC,MAAO,SAyDMC,IAvDH,SAAA3B,GAA4C,IAAzCC,EAAyCD,EAAzCC,KAAMe,EAAmChB,EAAnCgB,YAAaC,EAAsBjB,EAAtBiB,gBAC1BW,EAAWV,EAAaW,OAAO5B,EAAK6B,kBACtCC,EAAa,GACjB,GAAI9B,EAAK+B,cAAe,CACtB,IAAMC,EAAiBC,KAAKC,MAAMlC,EAAKmC,OAAOC,YAE5CN,EADEO,MAAML,GACKhC,EAAKmC,OAAOC,WAEZd,EAAaM,OAAOI,GAIrC,OACEM,EAAA1B,EAAAC,cAAAyB,EAAA1B,EAAA2B,SAAA,MACIvB,GAAmBsB,EAAA1B,EAAAC,cAAA,KAAG2B,KAAI,UAAYxC,EAAKQ,SAAYR,EAAKyC,MAC7DzB,GAAmBsB,EAAA1B,EAAAC,cAAAyB,EAAA1B,EAAA2B,SAAA,KAAGvC,EAAKyC,MAC3BzC,EAAK+B,eACJO,EAAA1B,EAAAC,cAAAyB,EAAA1B,EAAA2B,SAAA,KACG,IADH,IAEGD,EAAA1B,EAAAC,cAAA,KAAG2B,KAAMxC,EAAK+B,eAAgB/B,EAAK+B,eAFtC,MAKAhB,GACAuB,EAAA1B,EAAAC,cAAAyB,EAAA1B,EAAA2B,SAAA,KACED,EAAA1B,EAAAC,cAAA,WADF,YAEYc,EAAU,KAGvB3B,EAAK+B,eACJO,EAAA1B,EAAAC,cAAAyB,EAAA1B,EAAA2B,SAAA,KACED,EAAA1B,EAAAC,cAAA,WADF,gBAEgBiB,GAGlBQ,EAAA1B,EAAAC,cAAA,WACCb,EAAK0C,SAAW1C,EAAK0C,QAAQjC,OAAS,GACrC6B,EAAA1B,EAAAC,cAAA,KAAG2B,KAAMxC,EAAK0C,SAAd","file":"component---src-pages-2019-06-appco-out-js-d27fff36fe764f5092c6.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport App from '../../components/app'\nimport Layout from '../../components/layout'\n\nconst AppCo = ({ data }) => {\n  const retiredApps = data.lastmonth.edges\n    .filter(function(d) {\n      const appcodata = data.thismonth.edges.filter(\n        e => e.node.appcoid === d.node.appcoid\n      )\n      return appcodata.length === 0\n    })\n    .map((d, idx) => {\n      return (\n        <li key={idx}>\n          <App data={d.node} hideRewards hideDetailsLink/>\n        </li>\n      )\n    })\n\n  return (\n    <Layout>\n      <h1>Retired Blockstack Apps (June 2019)</h1>\n      <ul>\n        <li>Total number: {retiredApps.length}</li>\n      </ul>\n      <ul>{retiredApps}</ul>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query out201906 {\n    lastmonth:allAppminingresultsXlsxMay2019 {\n      totalCount\n      edges {\n        node {\n          appcoid: App_Id\n          name: App_Name\n          Final_Score\n        }\n      }\n    }\n    thismonth:allAppminingresultsXlsxJune2019 (\n      filter: { Final_Score: {ne: null} }\n      ){\n      edges {\n        node {\n          appcoid: App_Id\n          name: App_Name\n          Final_Score\n        }\n      }\n    }\n  }\n`\n\nexport default AppCo\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nexport const numberFormat = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n})\nexport const commitFormat = new Intl.DateTimeFormat('en-US', {\n  year: 'numeric',\n  month: 'long',\n})\nconst App = ({ data, hideRewards, hideDetailsLink }) => {\n  const earnings = numberFormat.format(data.lifetimeEarnings)\n  var lastUpdate = ''\n  if (data.openSourceUrl) {\n    const lastCommitDate = Date.parse(data.fields.lastCommit)\n    if (isNaN(lastCommitDate)) {\n      lastUpdate = data.fields.lastCommit\n    } else {\n      lastUpdate = commitFormat.format(lastCommitDate)\n    }\n  }\n\n  return (\n    <>\n      {!hideDetailsLink && <a href={`/appco/${data.appcoid}`}>{data.name}</a>}\n      {hideDetailsLink && <>{data.name}</>}\n      {data.openSourceUrl && (\n        <>\n          {' '}\n          (<a href={data.openSourceUrl}>{data.openSourceUrl}</a>)\n        </>\n      )}\n      {!hideRewards && (\n        <>\n          <br />\n          rewards: {earnings}{' '}\n        </>\n      )}\n      {data.openSourceUrl && (\n        <>\n          <br />\n          last update: {lastUpdate}\n        </>\n      )}\n      <br />\n      {data.website && data.website.length > 0 && (\n        <a href={data.website}>Launch app</a>\n      )}\n    </>\n  )\n}\n\nexport const query = graphql`\n  fragment AppInformation on apps {\n    appcoid: id__normalized\n    name\n    website\n    lifetimeEarnings\n    openSourceUrl\n    fields {\n      lastCommit\n    }\n  }\n`\n\nexport default App\n"],"sourceRoot":""}